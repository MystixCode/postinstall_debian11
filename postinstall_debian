#!/bin/bash
bold=`echo -en "\e[1m"`
purple=`echo -en "\e[35m"`
orange=`echo -en "\e[33m"`
red=`echo -en "\e[31m"`
green=`echo -en "\e[32m"`
lightblue=`echo -en "\e[94m"`
underline=`echo -en "\e[4m"`
normal=`echo -en "\e[0m"`
#not superuser check
if ! [ "$EUID" -ne 0 ] ; then
    echo "${orange}Dont run this script as root, run as the user whose environment u want to change.$normal"
    exit
fi
#install sudo if not already installed
if ! hash sudo 2>/dev/null; then
	echo "${purple}installing sudo$normal"
    su -c "apt install sudo ; echo '$USER ALL=(ALL:ALL) ALL' | sudo EDITOR='tee -a' visudo"
fi
update_system() {
    sudo apt -qq update && sudo apt -qq upgrade -y && sudo apt -qq full-upgrade -y && sudo apt -qq autoremove -y
}
install_firmware() {
    sudo dpkg --add-architecture i386 && sudo apt update
    sudo apt -qq install firmware-amd-graphics libgl1-mesa-dri libglx-mesa0 mesa-vulkan-drivers xserver-xorg-video-all libglx-mesa0:i386 mesa-vulkan-drivers:i386 libgl1-mesa-dri:i386 -y
}
install_kde_plasma_minimal() {
    sudo apt -qq install kde-plasma-desktop plasma-nm -y
    sudo sed -i 's/^managed=false/managed=true/' /etc/NetworkManager/NetworkManager.conf
    sudo systemctl restart NetworkManager
}
reboot_now() { 
    sudo shutdown -r now
}
install_firewall() {
    sudo apt -qq install ufw gufw -y
    sudo ufw enable
}
install_steam() {
    sudo dpkg --add-architecture i386
    sudo apt -qq update
    sudo apt -qq install steam -y
}
install_graphic_software() {
    sudo apt -qq install gimp krita blender -y
}
install_go() {
    sudo apt -qq install golang -y
    echo "${orange}you can install goland manually from here:$normal"
    echo "${lightblue}${underline}https://www.jetbrains.com/de-de/go/download/download-thanks.html?platform=linux$normal"
}
install_qemu_kvm() {
  if [[ $(egrep -c '(vmx|svm)' /proc/cpuinfo) > 0 ]];then
    echo "${green}kvm supported and enabled in bios$normal"
    sudo apt -qq install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virt-manager -y
    sudo gpasswd -a $USER kvm
  else
    echo "${red}kvm not supported or not enabled in bios$normal"
  fi
}
create_bridge() {
  ip link show
  read -p "${green}Enter Network Interface with Internet access ( enp4s0 ): $normal" iface
  sudo brctl addbr br0
  sudo ip link set $iface down
  sudo ip link set $iface up
  sudo brctl addif br0 $iface
  sudo dhclient br0
}
install_firefox() {
    sudo apt -qq install firefox-esr webext-ublock-origin-firefox -y
    firefox-esr&
    sleep 5
    pkill -f firefox
}
install_more_software() {
    sudo apt -qq install keepass2 thunderbird obs-studio baobab nethogs webext-ublock-origin-firefox ark kcalc kde-spectacle okular gwenview -y
}
remove_software() {
    sudo apt update && sudo apt -qq remove kwalletmanager termit xterm kdeconnect -y && sudo apt autoremove -y
}
disable_wifi() {
    nmcli radio all off
}
disable_bluetooth() {
    sudo systemctl stop bluetooth.service
}
enable_airplane_mode() {
    kwriteconfig5 --file ~/.config/plasma-nm --group General --key AirplaneModeEnabled true
}
disable_history() {
    kwriteconfig5 --file ~/.config/kactivitymanagerd-pluginsrc --group Plugin-org.kde.ActivityManager.Resources.Scoring --key what-to-remember 1
}
disable_mouse_acceleration() {
    kwriteconfig5 --file ~/.config/kcminputrc --group Mouse --key XLbInptAccelProfileFlat true
    kwriteconfig5 --file ~/.config/kcminputrc --group Mouse --key XLbInptPointerAcceleration 1
}
configure_dolphin() {
    kwriteconfig5 --file ~/.local/share/dolphin/view_properties/global/.directory --group Settings --key HiddenFilesShown true
    kwriteconfig5 --file ~/.config/dolphinrc --group General --key ShowFullPath true
    kwriteconfig5 --file ~/.config/dolphinrc --group General --key ShowFullPathInTitlebar true
    kwriteconfig5 --file ~/.config/dolphinrc --group Search --key Location Everywhere
}
configure_firefox() { 
    prefix="/home/$USER/.mozilla/firefox"
    suffix=".default-esr/"
    path=""
    for f in "${prefix}"/*"${suffix}"; do
        path="$f""user.js"
    done
    echo $path
    echo "user_pref(\"browser.contentblocking.category\",custom);
    user_pref(\"browser.privatebrowsing.autostart\", true);
    user_pref(\"browser.shell.checkDefaultBrowser\", true);
    user_pref(\"network.cookie.cookieBehavior\",1);
    user_pref(\"network.cookie.lifetimePolicy\",2);
    user_pref(\"privacy.donottrackheader.enabled\", true);
    user_pref(\"privacy.trackingprotection.enabled\", true);
    user_pref(\"privacy.trackingprotection.socialtracking.enabled\", true);
    user_pref(\"signon.rememberSignons\", false);
    " | sudo tee $path
}
change_taskbar() {
    kwriteconfig5 --file ~/.config/plasma-org.kde.plasma.desktop-appletsrc --group Containments --group 3 --key formfactor 3
    kwriteconfig5 --file ~/.config/plasma-org.kde.plasma.desktop-appletsrc --group Containments --group 3 --key location 5
}
install_minimal_menu() {
    echo "${orange}Manually download to /home/$USER/Downloads/ from here:$normal"
    echo "${lightblue}${underline}https://store.kde.org/s/KDE%20Store/p/1275285$normal"
    read -p "${red}Then Press enter to continue$normal"
    #TODO automate this with permanent working link
    #wget -O ~/Downloads/minimalmenu-0.3.0.plasmoid https://dllb2.pling.com/api/files/download/j/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6IjE1NDMwNDk1NDQiLCJ1IjpudWxsLCJsdCI6ImRvd25sb2FkIiwicyI6IjQ5Yjk5Nzg5N2U5NGExYWUxYWM3MmNiZWU1ZWI0MWJlMWFiYzE4OTIxOTBlZGQyMDU0MjhmN2QzNjEzODg1MGVlYzZkNDA1ZGQzOWZmMTlkZjg3Mjk0NTE2MTY5ZDY0YjYyODJkZTMyMzhkNDVlMjI1MDFjYWM5MzI4M2M2ZWVjIiwidCI6MTYyNTM1MzczNywic3RmcCI6IjQ2NGQ2YTAxZGQ1Mjk5NzY3OWE3ZDE1Nzk1OTBlYTM0Iiwic3RpcCI6IjJhMDI6MTIwNTozNGMxOmUwYzA6NzJjMDphNWZkOjkxNzU6NmQ2In0.WCdUSToV3lxljvpDuaCH_jrC89NfNvc6n0YGXsWlZq8/minimalmenu-0.3.0.plasmoid
    sudo kpackagetool5 -i ~/Downloads/minimalmenu-0.3.0.plasmoid
    kwriteconfig5 --file ~/.config/plasma-org.kde.plasma.desktop-appletsrc --group Containments --group 3 --group Applets --group 24 --group Configuration --group General --key customButtonImage /usr/share/pixmaps/debian-logo.png
    kwriteconfig5 --file ~/.config/plasma-org.kde.plasma.desktop-appletsrc --group Containments --group 3 --group Applets --group 24 --group Configuration --group General --key favoritesPortedToKAstats true
    kwriteconfig5 --file ~/.config/plasma-org.kde.plasma.desktop-appletsrc --group Containments --group 3 --group Applets --group 24 --group Configuration --group General --key switchCategoriesOnHover false
    kwriteconfig5 --file ~/.config/plasma-org.kde.plasma.desktop-appletsrc --group Containments --group 3 --group Applets --group 24 --group Configuration --group General --key useCustomButtonImage true
}
install_sddm_theme() {
    sudo apt install sddm-theme-breeze
    sudo rm -rf /usr/share/sddm/themes/debian-theme
    sudo ln -s /usr/share/sddm/themes/breeze /usr/share/sddm/themes/debian-theme
    #sudo sddm-greeter --theme /usr/share/sddm/themes/breeze
    #sudo sddmthemeinstaller -i /home/$USER/Downloads/theme.tar.gz 
}
configure_lockscreen() {
    kwriteconfig5 --file ~/.config/kscreenlockerrc --group Daemon --key Timeout 10
}
look_and_feel() {
    lookandfeeltool -a "$1"
}
plasma_theme() {
    kwriteconfig5 --file ~/.config/plasmarc --group Theme --key name "$1"
}
application_style_edit() {
    kwriteconfig5 --file ~/.config/kdeglobals --group KDE --key widgetStyle "$1"
}
window_decoration() {
    kwriteconfig5 --file ~/.config/kwinrc --group org.kde.kdecoration2 --key library "$1"
    kwriteconfig5 --file ~/.config/kwinrc --group org.kde.kdecoration2 --key theme "$2"
}
gtk_theme() {
    kwriteconfig5 --file ~/.config/gtk-3.0/settings.ini --group Settings --key gtk-theme-name "$1"
}
color_scheme() {
    kwriteconfig5 --file ~/.config/kdeglobals --group General --key ColorScheme "$1"
}
icons() {
    kwriteconfig5 --file ~/.config/kdeglobals --group Icons --key Theme "$1"
}
cursor() {
    kwriteconfig5 --file ~/.config/kcminputrc --group Mouse --key cursorTheme "$1"
}
gtk_cursor() {
    kwriteconfig5 --file ~/.config/gtk-3.0/settings.ini --group Settings --key gtk-cursor-theme-name "$1"
}
splash_screen() {
    kwriteconfig5 --file ~/.config/ksplashrc --group KSplash --key Theme "$1"
}
change_global_theme_dark() {
    install_sddm_theme
    look_and_feel "org.kde.breezedark.desktop"
    plasma_theme "breeze-dark"
    application_style_edit "Breeze"
    window_decoration "org.kde.breeze" "Breeze"
    gtk_theme "Breeze"
    color_scheme "BreezeDark"
    icons "breeze-dark"
    cursor "breeze_cursors"
    gtk_cursor "breeze_cursors"
    splash_screen "org.kde.breeze.desktop"
}
change_global_theme_light() {
    install_sddm_theme
    look_and_feel "org.kde.breeze.desktop"
    plasma_theme "breeze"
    application_style_edit "Breeze"
    window_decoration "org.kde.breeze" "Breeze"
    gtk_theme "Breeze"
    color_scheme "Breeze"
    icons "breeze"
    cursor "breeze_cursors"
    gtk_cursor "breeze_cursors"
    splash_screen "org.kde.breeze.desktop"
}
change_wallpaper() {
    wget -O ~/Downloads/wallpaper_dark.jpg https://raw.githubusercontent.com/MystixCode/postinstall_debian11/main/img/wallpaper_dark.jpg
    wget -O ~/Downloads/wallpaper_login.jpg https://raw.githubusercontent.com/MystixCode/postinstall_debian11/main/img/wallpaper_login.jpg
    echo "${orange}Choose standard wallpaper$normal"
    wallpaper=$(zenity --file-selection --title="Choose standard wallpaper")
    echo "standard wallpaper:   $wallpaper"
    echo "${orange}Choose login wallpaper$normal"
    wallpaper_sddm=$(zenity --file-selection --title="Choose login wallpaper")
    echo "login wallpaper:      $wallpaper_sddm"
    echo "${orange}Choose lockscreen wallpaper$normal"
    wallpaper_lock=$(zenity --file-selection --title="Choose lockscreen wallpaper")
    echo "lockscreen wallpaper: $wallpaper_lock"
    #sddm wallpaper
    sudo kwriteconfig5 --file /usr/share/sddm/themes/breeze/theme.conf --group General --key background $wallpaper_sddm
    #lockscreen wallpaper
    kwriteconfig5 --file ~/.config/kscreenlockerrc --group Greeter --group Wallpaper --group org.kde.image --group General --key Image $wallpaper_lock
    #wallpaper
	dbus-send --session --dest=org.kde.plasmashell --type=method_call /PlasmaShell org.kde.PlasmaShell.evaluateScript 'string: 
		var Desktops = desktops(); 
			for (i=0;i<Desktops.length;i++){	
				d = Desktops[i]; d.wallpaperPlugin = "org.kde.image"; 
				d.currentConfigGroup = Array("Wallpaper","org.kde.image","General"); 
				d.writeConfig("Image","file://'$wallpaper'");
			}'
}
restart_ui() {
    qdbus org.kde.KWin /KWin reconfigure
    kquitapp5 plasmashell && kstart5 plasmashell
}
helpmenu(){
    echo "${purple}Usage:$normal ./postinstall_debian <option>"
    echo "${orange}Starts in interactive mode without arguments$normal"
    echo ""
    echo "-h        --help                    Display Help"
    echo ""
    echo "${orange}Options:$normal"
    echo -e "update_system\ninstall_firmware\ninstall_kde_plasma_minimal\nreboot_now\ninstall_firewall\ninstall_steam\ninstall_graphic_software\ninstall_go\ninstall_qemu_kvm\ncreate_bridge\ninstall_firefox\ninstall_more_software\nremove_software\ndisable_wifi\ndisable_bluetooth\nenable_airplane_mode\ndisable_history\ndisable_mouse_acceleration\nconfigure_dolphin\nconfigure_firefox\nchange_taskbar\ninstall_minimal_menu\nconfigure_lockscreen\nchange_global_theme_dark\nchange_global_theme_light\nchange_wallpaper\nrestart_ui"
    exit
}
functions_array=(update_system install_firmware install_kde_plasma_minimal reboot_now install_firewall install_steam install_graphic_software install_go install_qemu_kvm create_bridge install_firefox install_more_software remove_software disable_wifi disable_bluetooth enable_airplane_mode disable_history disable_mouse_acceleration configure_dolphin configure_firefox change_taskbar install_minimal_menu configure_lockscreen change_global_theme_dark change_global_theme_light change_wallpaper restart_ui)
if [[ " $# " -ne 0 ]]; then
    #echo "${orange}Total Arguments: $# $normal"
    for i in $@
    do
        if [[ ${i} = "-h" || ${i} = "--help" ]]; then
            helpmenu
        fi
        if [[ " ${functions_array[@]} " =~ " ${i} " ]]; then
            # whatever you want to do when array contains value
            echo "${green}Option ${i} valid$normal"
            ${i} #exec function
        else
            echo "${red}Unknown option ${i}$normal"
        fi
    done
else
    for i in "${functions_array[@]}"; do
        formatted1=${i//_/ }
        formatted2=${formatted1^}
        echo -n "${purple}${formatted2^} (y/n)? $normal"
        read answer
        if [ "$answer" != "${answer#[Yy]}" ] ;then
            ${i}
        fi
    done
fi
#TODO monitor to max hertz
#TODO pin fav software to panel
#TODO doubleclick to open dir in dolphin
